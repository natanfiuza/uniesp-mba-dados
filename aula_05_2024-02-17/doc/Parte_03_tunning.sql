USE TUNNING
GO

SET NOCOUNT ON;

/*
	DROP TABLE IF EXISTS MATRICULAS
	GO
	DROP TABLE IF EXISTS TURMAS
	GO
	DROP TABLE IF EXISTS ALUNOS
	GO
	DROP TABLE IF EXISTS RESPONSAVEIS
	GO
*/

----------TABELAs

CREATE TABLE RESPONSAVEIS(
	ID INT NOT NULL IDENTITY(1,1),
	NOME VARCHAR(60) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	CPF CHAR(11) NOT NULL,

	CONSTRAINT PK_RESPONSAVEIS PRIMARY KEY(ID),

	CONSTRAINT CHK_RESPONSAVEIS_SEXO CHECK(SEXO IN('M','F'))
);
GO

CREATE TABLE ALUNOS(
	ID INT NOT NULL IDENTITY(1,1),
	NOME VARCHAR(60) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	DATA_NASCIMENTO DATETIME NOT NULL,
	ID_RESPONSAVEL INT NOT NULL,

	CONSTRAINT PK_ALUNOS PRIMARY KEY(ID),

	CONSTRAINT CHK_ALUNOS_SEXO CHECK(SEXO IN('M','F')),

	CONSTRAINT FK_ALUNOS_RESPONSAVEIS FOREIGN KEY(ID_RESPONSAVEL) REFERENCES RESPONSAVEIS(ID)
);
GO

CREATE TABLE TURMAS(
	ID INT NOT NULL IDENTITY(1,1),
	ANO CHAR(1) NOT NULL, --1º ANO, 5º ANO, ETC.
	LETRA CHAR(1) NOT NULL, --A, B, ...
	ENSINO VARCHAR(11) NOT NULL,
	ANO_LETIVO CHAR(4) NOT NULL, --2017, 2018, ...

	CONSTRAINT PK_TURMAS PRIMARY KEY(ID),

	CONSTRAINT CHK_TURMAS_ENSINO CHECK(ENSINO IN('INFANTIL','FUNDAMENTAL','MEDIO')),

	CONSTRAINT CHK_TURMAS_ANO_LETIVO CHECK(ANO_LETIVO > 2009)
);
GO


CREATE TABLE MATRICULAS(
	ID INT NOT NULL IDENTITY(1,1),
	ID_ALUNO INT NOT NULL,
	ID_TURMA INT NOT NULL,
	DATA_MATRICULA DATETIME NOT NULL CONSTRAINT DEF_MATRICULAS_DATA_MATRICULA DEFAULT GETDATE(),

	CONSTRAINT PK_MATRICULAS PRIMARY KEY(ID),

	CONSTRAINT FK_MATRICULAS_ALUNOS FOREIGN KEY(ID_ALUNO) REFERENCES ALUNOS(ID),

	CONSTRAINT FK_MATRICULAS_TURMAS FOREIGN KEY(ID_TURMA) REFERENCES TURMAS(ID),

	CONSTRAINT UNQ_MATRICULAS_ALUNO_TURMA UNIQUE(ID_ALUNO,ID_TURMA)
);
GO

------------------INSERTs

---RESPONSAVEIS

DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 10000

WHILE @CONTADOR <= @QUANTIDADE
BEGIN
	INSERT INTO RESPONSAVEIS
	(NOME,SEXO,CPF)
	SELECT ('RESPONSAVEL ' + CAST(@CONTADOR AS VARCHAR)),
	CASE ((@CONTADOR%23*@CONTADOR%17)%43%2)
		WHEN 0 THEN 'M'
		ELSE 'F'
	END,
	CAST(@CONTADOR AS VARCHAR)

	SET @CONTADOR += 1;
END;
GO

SELECT *
FROM RESPONSAVEIS;
GO

SELECT SEXO,COUNT(*) AS QTDE
FROM RESPONSAVEIS
GROUP BY SEXO;
GO

------ALUNOS

DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 32000

WHILE @CONTADOR <= @QUANTIDADE
BEGIN
	INSERT INTO ALUNOS
	(NOME,SEXO,DATA_NASCIMENTO,ID_RESPONSAVEL)
	SELECT ('ALUNO ' + CAST(@CONTADOR AS VARCHAR)),
	CASE ((@CONTADOR%23*@CONTADOR%17)%43%2)
		WHEN 0 THEN 'M'
		ELSE 'F'
	END,
	'200' + CAST(((@CONTADOR%37*@CONTADOR%27)%11%10) AS VARCHAR) --ANO (DE 0 A 9)
	+
	CASE --MÊS
		WHEN (((@CONTADOR%53*@CONTADOR%29)%13%12)+1) > 9 THEN CAST(((@CONTADOR%53*@CONTADOR%29)%13%12)+1 AS VARCHAR)
		ELSE '0' + CAST(((@CONTADOR%53*@CONTADOR%29)%13%12)+1 AS VARCHAR)
	END
	+
	CASE --DIA
		WHEN (((@CONTADOR%21*@CONTADOR%11)%37%27)+1) > 9 THEN CAST(((@CONTADOR%21*@CONTADOR%11)%37%27)+1 AS VARCHAR)
		ELSE '0' + CAST(((@CONTADOR%21*@CONTADOR%11)%37%27)+1 AS VARCHAR)
	END
	,
	CAST((@CONTADOR%10000)+1 AS VARCHAR)

	SET @CONTADOR += 1;
END;
GO

SELECT *
FROM ALUNOS;
GO

---TURMAS

DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 100

WHILE @CONTADOR <= @QUANTIDADE
BEGIN
	INSERT INTO TURMAS
	(ANO,LETRA,ENSINO,ANO_LETIVO)
	SELECT 

	CASE ((@CONTADOR%23*@CONTADOR%17)%43%3)
		WHEN 0 THEN (@CONTADOR%3)+1  --CONSIDERANDO OS 3 ANOS DO ENSINO INFANTIL COMO 1,2,3 PARA FACILITAR
		WHEN 1 THEN (@CONTADOR%8)+1
		WHEN 2 THEN (@CONTADOR%3)+1
	END,

	CASE ((@CONTADOR%23*@CONTADOR%17)%43%2)
		WHEN 0 THEN 'A'
		ELSE 'B'
	END,

	CASE ((@CONTADOR%23*@CONTADOR%17)%43%3)
		WHEN 0 THEN 'INFANTIL'
		WHEN 1 THEN 'FUNDAMENTAL'
		WHEN 2 THEN 'MEDIO'
	END,

	'201' + CAST(((@CONTADOR%37*@CONTADOR%27)%11%10) AS VARCHAR) --ANO (DE 0 A 9)  --> SIM, EU SEI QUE VAI INSERIR ANOS NO "FUTURO" :D

	SET @CONTADOR += 1;
END;
GO

SELECT *
FROM TURMAS;
GO

---MATRICULAS

DECLARE @CONTADOR INT, @QUANTIDADE INT, @CONTADOR2 INT, @QUANTIDADE2 INT
SELECT @CONTADOR = 1, @QUANTIDADE = 10000
SELECT @QUANTIDADE2 = 5

WHILE @CONTADOR <= @QUANTIDADE
BEGIN
	SET @CONTADOR2 = 1;

	WHILE @CONTADOR2 <= @QUANTIDADE2
	BEGIN

		INSERT INTO MATRICULAS
		(ID_ALUNO,ID_TURMA, DATA_MATRICULA)  --VEJA QUE, MESMO COM DEFAULT NA COLUNA DATA_MATRICULA, PODEMOS FORNECEDR VALOR A ELA (APENAS RELEMBRANDO!)

		SELECT @CONTADOR, T.ID, T.ANO_LETIVO
		+
		CASE --MÊS
			WHEN (((@CONTADOR*@CONTADOR2%53*@CONTADOR*@CONTADOR2%29)%13%12)+1) > 9 THEN CAST(((@CONTADOR*@CONTADOR2%53*@CONTADOR*@CONTADOR2%29)%13%12)+1 AS VARCHAR)
			ELSE '0' + CAST(((@CONTADOR*@CONTADOR2%53*@CONTADOR*@CONTADOR2%29)%13%12)+1 AS VARCHAR)
		END
		+
		CASE --DIA
			WHEN (((@CONTADOR*@CONTADOR2%21*@CONTADOR*@CONTADOR2%11)%37%27)+1) > 9 THEN CAST(((@CONTADOR*@CONTADOR2%21*@CONTADOR*@CONTADOR2%11)%37%27)+1 AS VARCHAR)
			ELSE '0' + CAST(((@CONTADOR*@CONTADOR2%21*@CONTADOR*@CONTADOR2%11)%37%27)+1 AS VARCHAR)
		END

		FROM TURMAS T
		WHERE ID = (@CONTADOR2 % 100)+1

		SET @CONTADOR2 += 1;
	END;

	SET @CONTADOR += 1;
END;
GO

SELECT *
FROM MATRICULAS;
GO


------FUNÇÕES
CREATE FUNCTION FN_SEXO_DESCRITIVO_SCALAR(@SEXO CHAR(1))
RETURNS VARCHAR(9)
AS
BEGIN
	DECLARE @SEXO_OUT VARCHAR(9)

	SELECT @SEXO_OUT =
	CASE
		WHEN @SEXO = 'M' THEN 'MASCULINO'
		WHEN @SEXO = 'F' THEN 'FEMININO'
	END

	RETURN @SEXO_OUT
END;
GO

CREATE FUNCTION FN_SEXO_DESCRITIVO_TABULAR_MULTI_STATEMENT(@SEXO CHAR(1))
RETURNS @SEXOS TABLE(
	SEXO VARCHAR(9)
)
AS
BEGIN
	INSERT INTO @SEXOS
	SELECT
	CASE
		WHEN @SEXO = 'M' THEN 'MASCULINO'
		WHEN @SEXO = 'F' THEN 'FEMININO'
	END

	RETURN
END;
GO

CREATE FUNCTION FN_SEXO_DESCRITIVO_TABULAR_INLINE(@SEXO CHAR(1))
RETURNS TABLE
AS
RETURN
(
	SELECT
	CASE
		WHEN @SEXO = 'M' THEN 'MASCULINO'
		WHEN @SEXO = 'F' THEN 'FEMININO'
	END AS SEXO
)
GO

SET STATISTICS TIME ON;
SET STATISTICS IO ON;
--ATIVAR O PLANO DE EXECUÇÃO REAL

SELECT A.SEXO, dbo.FN_SEXO_DESCRITIVO_SCALAR(A.SEXO) AS SEXO
FROM ALUNOS A
GO

SELECT A.SEXO, TAB.SEXO
FROM ALUNOS A
CROSS APPLY FN_SEXO_DESCRITIVO_TABULAR_MULTI_STATEMENT(A.SEXO) TAB
GO

SELECT A.SEXO, TAB.SEXO
FROM ALUNOS A
CROSS APPLY FN_SEXO_DESCRITIVO_TABULAR_INLINE(A.SEXO) TAB
GO


-------VIEWS
CREATE VIEW VW_ALUNOS
AS
SELECT A.NOME AS ALUNO, A.SEXO AS SEXO_ALUNO, A.DATA_NASCIMENTO, R.NOME AS RESPONSAVEL, R.CPF, 
R.SEXO AS SEXO_RESPONSAVEL, M.DATA_MATRICULA, T.ENSINO, T.ANO, T.ANO_LETIVO
FROM ALUNOS A
INNER JOIN RESPONSAVEIS R ON (R.ID = A.ID_RESPONSAVEL)
INNER JOIN MATRICULAS M ON (M.ID_ALUNO = A.ID)
INNER JOIN TURMAS T ON (T.ID = M.ID_TURMA)
GO

SET STATISTICS TIME ON
SET STATISTICS IO ON

SELECT ALUNO, SEXO_ALUNO, DATA_NASCIMENTO
FROM VW_ALUNOS
GO

SELECT A.NOME AS ALUNO, A.SEXO AS SEXO_ALUNO, A.DATA_NASCIMENTO
FROM ALUNOS A
INNER JOIN RESPONSAVEIS R ON (R.ID = A.ID_RESPONSAVEL)
INNER JOIN MATRICULAS M ON (M.ID_ALUNO = A.ID)
INNER JOIN TURMAS T ON (T.ID = M.ID_TURMA)
GO

SELECT NOME, SEXO, DATA_NASCIMENTO
FROM ALUNOS
GO

------PROCEDURES

CREATE PROCEDURE USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE_TABLE_VARIABLE(@IDADE INT)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ALUNOS TABLE(
		ID INT
	)

	INSERT INTO @ALUNOS
	SELECT ID_RESPONSAVEL
	FROM ALUNOS
	WHERE DATA_NASCIMENTO <= 
	CAST(
		(
			CAST((YEAR(GETDATE()) - @IDADE) AS VARCHAR)
			+ CASE WHEN (MONTH(GETDATE())) < 10 THEN '0' + CAST((MONTH(GETDATE())) AS VARCHAR) ELSE CAST((MONTH(GETDATE())) AS VARCHAR) END
			+ CASE WHEN DAY(GETDATE()) < 10 THEN '0' + CAST(DAY(GETDATE()) AS VARCHAR) ELSE CAST(DAY(GETDATE()) AS VARCHAR) END
		)  --CÁLCULO NO PARÂMETRO E NÃO NO CAMPO DE FILTRO NA TABELA!
	AS DATETIME);

	SELECT CPF
	FROM RESPONSAVEIS R
	WHERE EXISTS(
		SELECT 1
		FROM @ALUNOS A
		WHERE A.ID = R.ID
	)
END;
GO

EXEC USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE_TABLE_VARIABLE @IDADE = 15;
GO

CREATE PROCEDURE USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE_LOOP(@IDADE INT)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @CONTADOR INT, @QUANTIDADE INT
	DECLARE @ALUNOS TABLE(
		ID INT NOT NULL
	)
	
	SELECT @CONTADOR = 1, @QUANTIDADE = COUNT(*)
	FROM ALUNOS

	WHILE @CONTADOR <= @QUANTIDADE
	BEGIN
		INSERT INTO @ALUNOS
		SELECT ID_RESPONSAVEL
		FROM ALUNOS
		WHERE ID = @CONTADOR
		AND DATA_NASCIMENTO <= 
		CAST(
			(
				CAST((YEAR(GETDATE()) - @IDADE) AS VARCHAR)
				+ CASE WHEN (MONTH(GETDATE())) < 10 THEN '0' + CAST((MONTH(GETDATE())) AS VARCHAR) ELSE CAST((MONTH(GETDATE())) AS VARCHAR) END
				+ CASE WHEN DAY(GETDATE()) < 10 THEN '0' + CAST(DAY(GETDATE()) AS VARCHAR) ELSE CAST(DAY(GETDATE()) AS VARCHAR) END
			)  --CÁLCULO NO PARÂMETRO E NÃO NO CAMPO DE FILTRO NA TABELA!
		AS DATETIME);

		SET @CONTADOR += 1;
	END;
END;
GO

EXEC USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE_LOOP @IDADE = 15;
GO

CREATE PROCEDURE USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE(@IDADE INT)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT R.CPF
	FROM RESPONSAVEIS R
	WHERE EXISTS(
		SELECT 1
		FROM ALUNOS A
		WHERE A.ID_RESPONSAVEL = R.ID
		AND DATA_NASCIMENTO <= 
		CAST(
			(
				CAST((YEAR(GETDATE()) - @IDADE) AS VARCHAR)
				+ CASE WHEN (MONTH(GETDATE())) < 10 THEN '0' + CAST((MONTH(GETDATE())) AS VARCHAR) ELSE CAST((MONTH(GETDATE())) AS VARCHAR) END
				+ CASE WHEN DAY(GETDATE()) < 10 THEN '0' + CAST(DAY(GETDATE()) AS VARCHAR) ELSE CAST(DAY(GETDATE()) AS VARCHAR) END
			)  --CÁLCULO NO PARÂMETRO E NÃO NO CAMPO DE FILTRO NA TABELA!
		AS DATETIME)
	)
END;
GO

EXEC USP_RESPONSAVEIS_COM_FILHOS_POR_IDADE @IDADE = 15;
GO

------TRIGGERS
CREATE FUNCTION FN_IDADE(@DATA_NASCIMENTO DATETIME)
RETURNS TABLE
AS
RETURN
(
	SELECT
	CASE
		WHEN DATEADD(YY,(DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())),@DATA_NASCIMENTO) > GETDATE() THEN DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())-1
		ELSE DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())
	END AS IDADE
)
GO

CREATE FUNCTION FN_IDADE_SCALAR(@DATA_NASCIMENTO DATETIME)
RETURNS INT
AS
BEGIN
	DECLARE @IDADE INT

	SELECT @IDADE =
	CASE
		WHEN DATEADD(YY,(DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())),@DATA_NASCIMENTO) > GETDATE() THEN DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())-1
		ELSE DATEDIFF(YY,@DATA_NASCIMENTO,GETDATE())
	END

	RETURN @IDADE
END;
GO

SELECT *
FROM FN_IDADE('19930811');
GO

SELECT dbo.FN_IDADE_SCALAR('19930811');
GO

CREATE TRIGGER TI_MATRICULAS
ON MATRICULAS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	IF(
		SELECT DBO.FN_IDADE_SCALAR(A.DATA_NASCIMENTO)
		FROM INSERTED I
		INNER JOIN ALUNOS A ON (A.ID = I.ID_ALUNO)
	) < 3
	BEGIN
		ROLLBACK;
		RAISERROR('FALHA NA MATRÍCULA!',16,1)
	END;
END;
GO

UPDATE ALUNOS
SET DATA_NASCIMENTO = GETDATE()-730
WHERE ID IN(1,2);
GO

--COM UM REGISTRO FUNCIONA BEM?
INSERT INTO MATRICULAS
SELECT 1,1,GETDATE();
GO

--E COM MAIS DE UM AO MESMO TEMPO?
INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 1,1,GETDATE()
UNION ALL
SELECT 2,1,GETDATE()
GO

--Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <, <= , >, >= or when the subquery is used as an expression.
--FALHA NO INSERT DEVIDO A TRIGGER PROJETADA APENAS PARA 1 REGISTRO POR VEZ (OPERADOR UNITÁRIO "<")

ALTER TRIGGER TI_MATRICULAS
ON MATRICULAS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS(
		SELECT 1
		FROM INSERTED I
		INNER JOIN ALUNOS A ON (A.ID = I.ID_ALUNO)
		CROSS APPLY FN_IDADE(DATA_NASCIMENTO) FN
		WHERE FN.IDADE < 3
	)
	BEGIN
		ROLLBACK;
		RAISERROR('FALHA NA MATRÍCULA!',16,1)
	END;
END;
GO

INSERT INTO MATRICULAS
SELECT 1,1,GETDATE();
GO

--E AGORA?
INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 1,1,GETDATE()
UNION ALL
SELECT 2,1,GETDATE()
GO

--FUNCIONOU! MAS...
INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 1,1,GETDATE()
UNION ALL
SELECT 2,1,GETDATE()
GO

INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 3,1,GETDATE()

INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 2,1,GETDATE()
UNION ALL
SELECT 4,1,GETDATE()
GO

--CONTINUAMOS -NÃO- CONSEGUINDO INSERIR PARCIALMENTE OS REGISTROS!

--OUTRA POSSIBILIDADE
ALTER TRIGGER TI_MATRICULAS
ON MATRICULAS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS(
		SELECT 1
		FROM INSERTED I
		INNER JOIN ALUNOS A ON (A.ID = I.ID_ALUNO)
		CROSS APPLY FN_IDADE(DATA_NASCIMENTO) FN
		WHERE FN.IDADE < 3
	)
	BEGIN
		ROLLBACK;
		RAISERROR('FALHA NA MATRÍCULA!',16,1)
	END;
END;
GO

INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 2,1,GETDATE()
UNION ALL
SELECT 4,1,GETDATE()
GO

--O PROBLEMA PERSISTE!
--ENTÃO, COMO RESOLVER?!

DROP TRIGGER TI_MATRICULAS;
GO

--CRIANDO TIPO DE DADOS DO TIPO TABLE
CREATE TYPE dbo.TipoAlunos AS TABLE  
(ID_ALUNO INT, ID_TURMA INT, DATA_NASCIMENTO DATETIME);
GO

CREATE PROCEDURE USP_INSERIR_MATRICULAS(
	@ALUNOS TipoAlunos READONLY  --READONLY É OBRIGATÓRIO
)
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO MATRICULAS
	SELECT ID_ALUNO, ID_TURMA, DATA_NASCIMENTO
	FROM @ALUNOS A
	CROSS APPLY FN_IDADE(A.DATA_NASCIMENTO) FN
	WHERE FN.IDADE >= 3
END;
GO

INSERT INTO MATRICULAS  --SE A MENSAGEM DE ERRO QUE APARECER FOR "Violation of UNIQUE KEY constraint 'UNQ_MATRICULAS_ALUNO_TURMA'. Cannot insert duplicate key in object 'dbo.MATRICULAS'. The duplicate key value is (2, 2)." -> ALTERE A TURMA E TENTE NOVAMENTE
SELECT 4,1,GETDATE()
GO

DECLARE @ALUNOS TipoAlunos;

INSERT INTO @ALUNOS
SELECT A.ID,1,A.DATA_NASCIMENTO
FROM ALUNOS A
WHERE A.ID = 2
UNION ALL
SELECT A.ID,1,A.DATA_NASCIMENTO
FROM ALUNOS A
WHERE A.ID = 5;

SELECT *
FROM @ALUNOS;

EXEC USP_INSERIR_MATRICULAS @ALUNOS;
GO

--CONFERINDO O RESULTADO!
SELECT *
FROM MATRICULAS
WHERE ID_TURMA = 1
AND ID_ALUNO IN(2,5);
GO