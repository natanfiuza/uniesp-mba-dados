USE DISCIPLINA02
GO

--INSIRA AS SIGLAS DE TODAS AS "UFS" DO BRASIL, MENOS DA PARAÍBA
INSERT INTO UFS
(UF)
VALUES('RS'),('SC'),('PR'),('SP'),('RJ'),('MG'),('ES'),('MS'),('MT'),('GO'),('BA'),('SE'),('AL'),('PE'),('RN'),('CE'),('PI'),('MA'),('RO'),('AC'),('AM'),('RR'),('PA'),('AP'),('TO'),('DF');
GO


--INSIRA UM REGISTRO NA TABELA "UFS" COM O VALOR PADRÃO
INSERT INTO UFS
(UF)
VALUES
(DEFAULT);
GO

--LISTAR TODAS AS UFS, COM TODAS AS COLUNAS
SELECT * 
FROM UFS;
GO

--INSERIR CIDADES DE FORMA DISTRIBUÍDA POR CADA UF
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 1001;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO CIDADES
	SELECT 'CIDADE'+CAST(@CONTADOR AS VARCHAR), (@CONTADOR%27)+1;  --(MOD(@CONTADOR,27))+1;

	SET @CONTADOR+=1;
END;
GO

--LISTE AS CIDADES, INFORMANDO AS COLUNAS QUE DESEJA LISTAR INDIVIDUALMENTE
SELECT IDCIDADE, CIDADE, IDUF
FROM CIDADES;
GO


--INSERIR BAIRROS, DISTRIBUÍDOS POR CADA CIDADE
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 10000;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO BAIRROS
	SELECT 'BAIRRO'+CAST(@CONTADOR AS VARCHAR), (@CONTADOR%1000)+1;

	SET @CONTADOR+=1;
END;
GO

--LISTE OS BAIRROS, EXIBINDO A COLUNA BAIRRO COMO "NOME"
SELECT IDBAIRRO, BAIRRO AS NOME, IDCIDADE
FROM BAIRROS;
GO


--INSIRA LOGRADOUROS DISTRIBUÍDOS POR BAIRRO
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 100000;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO LOGRADOUROS
	SELECT 'LOGRADOURO'+CAST(@CONTADOR AS VARCHAR), (@CONTADOR%10000)+1,(100000-@CONTADOR)

	SET @CONTADOR+=1;
END;
GO

--LISTE OS LOGRADOUROS, (OMITINDO A COLUNA IDLOGRADOURO) EXIBINDO O LOGRADOURO COMO "ENDERECO" E SOMANDO AS COLUNAS IDBAIRRO E CEP, CHAMANDO O RESULTANDO DE SOMA
SELECT LOGRADOURO AS ENDERECO, IDBAIRRO + CEP AS SOMA
FROM LOGRADOUROS;
GO

--REMOVA TODOS OS REGISTROS DA TABELA LOGRADOUROS
TRUNCATE TABLE LOGRADOUROS;
GO

--DESABILITANDO UMA CONSTRAINT
ALTER TABLE CLIENTES NOCHECK CONSTRAINT FK_CLIENTES_LOGRADOUROS;
GO

TRUNCATE TABLE LOGRADOUROS;
GO

--HABILITANDO UMA CONSTRAINT
ALTER TABLE CLIENTES CHECK CONSTRAINT FK_CLIENTES_LOGRADOUROS;
GO

--DESATIVANDO TODAS AS CONSTRAINTS DE UMA TABELA
ALTER TABLE CLIENTES NOCHECK CONSTRAINT ALL;
GO

TRUNCATE TABLE LOGRADOUROS;
GO

--HABILITANDO TODAS AS CONSTRAINTS DE UMA TABELA
ALTER TABLE CLIENTES CHECK CONSTRAINT ALL;
GO

--HABILITANDO UMA CONSTRAINT E VERIFICANDO SE OS DADOS DA TABELA SÃO VÁLIDOS
ALTER TABLE CLIENTES WITH CHECK CHECK CONSTRAINT FK_CLIENTES_LOGRADOUROS;
GO

--ADICIONE UMA CONSTRAINT AO CAMPO QUANTIDADE, DA TABELA ITENS_VENDAS, QUE PERMITA APENAS REGISTROS COM QUANTIDADE MAIOR QUE 0, SEM VALIDAR OS REGISTROS QUE JÁ EXISTEM
ALTER TABLE ITENS_VENDAS
WITH NOCHECK ADD CONSTRAINT CHK_ITENS_VENDAS_QUANTIDADE CHECK(QUANTIDADE > 0);
GO

--FAÇA COM QUE A CONSTRAINT AGORA VALIDE TODOS OS REGISTROS QUE JÁ EXISTEM NA TABELA
ALTER TABLE ITENS_VENDAS
WITH CHECK CHECK CONSTRAINT CHK_ITENS_VENDAS_QUANTIDADE;
GO

--HABILITANDO A CONSTRAINT E VALIDANDO OS DADOS JÁ EXISTENTES
ALTER TABLE CLIENTES
WITH CHECK CHECK CONSTRAINT CHK_CLIENTES_SEXO;
GO


TRUNCATE TABLE LOGRADOUROS;
GO

--REMOVA A CONSTRAINT FK_CLIENTES_LOGRADOUROS
ALTER TABLE CLIENTES DROP CONSTRAINT FK_CLIENTES_LOGRADOUROS;
GO

TRUNCATE TABLE LOGRADOUROS;
GO

--ADICIONE NOVAMENTE A CONSTRAINT REMOVIDA
ALTER TABLE CLIENTES
ADD CONSTRAINT FK_CLIENTES_LOGRADOUROS FOREIGN KEY(IDLOGRADOURO) REFERENCES LOGRADOUROS(IDLOGRADOURO) ON UPDATE NO ACTION ON DELETE NO ACTION
GO


--INSIRA REGISTROS DE LOGRADOUROS DISTRIBUÍDOS POR BAIRRO
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 99999;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO LOGRADOUROS
	SELECT 'LOGRADOURO'+CAST(@CONTADOR AS VARCHAR), (@CONTADOR%10000)+1,(100000-@CONTADOR)

	SET @CONTADOR+=1;
END;
GO

--EXIBA A QUANTIDADE DE REGISTROS DA TABELA LOGRADOUROS, O MAIOR E O MENOR IDLOGRADOURO (NOMEEI COMO QTDE, MAIOR E MENOR)
SELECT COUNT(*) AS QTDE, MAX(IDLOGRADOURO) AS MAIOR, MIN(IDLOGRADOURO) AS MENOR
FROM LOGRADOUROS;
GO


--INSIRA REGISTROS DE CLIENTES
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 1000;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO CLIENTES
	SELECT 'CLIENTE'+CAST(@CONTADOR AS VARCHAR), @CONTADOR , CASE WHEN @CONTADOR % 2 = 0 THEN 'M' ELSE 'F'END, FLOOR(RAND()*(1000-1)+1);

	SET @CONTADOR+=1;
END;
GO

--EXIBA A MÉDIA DOS VALORES DA COLUNA IDCLIENTE (E NOMEIE DE MEDIA), E A SOMA DOS VALORES DA MESMA COLUNA (NOMEEI COMO SOMA)
SELECT AVG(IDCLIENTE) AS MEDIA, SUM(IDCLIENTE) AS SOMA
FROM CLIENTES;
GO



--INSERA PRODUTOS
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 5000;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO PRODUTOS
	SELECT 'PRODUTO'+CAST(@CONTADOR AS VARCHAR), RAND()*(9999-1)+1

	SET @CONTADOR+=1;
END;
GO


--LISTE TODOS OS VALORES DISTINTOS DE PRODUTOS
SELECT DISTINCT VALOR
FROM PRODUTOS;
GO





--INSIRA VENDAS
DECLARE @CONTADOR INT, @QUANTIDADE INT
SELECT @CONTADOR = 1, @QUANTIDADE = 3000;

WHILE @CONTADOR <= @QUANTIDADE
BEGIN

	INSERT INTO VENDAS
	SELECT dateadd(day, 
               rand(checksum(newid()))*(1+datediff(day, CAST('20100101' AS DATETIME), CAST('20150701' AS DATETIME))), 
               CAST('20100101' AS DATETIME)), 
			FLOOR(RAND()*(1000-1)+1)

	SET @CONTADOR+=1;
END;
GO



--INSIRA ITENS DAS VENDAS
DECLARE @CONTADOR_ITENS INT, @CONTADOR_VENDAS INT, @QUANTIDADE_ITENS INT, @QUANTIDADE_VENDAS INT;
SELECT @CONTADOR_VENDAS = 1, @QUANTIDADE_VENDAS = 15000

WHILE @CONTADOR_VENDAS <= @QUANTIDADE_VENDAS
BEGIN
	SELECT @CONTADOR_ITENS = 1, @QUANTIDADE_ITENS = 10;

		WHILE @CONTADOR_ITENS <= @QUANTIDADE_ITENS
		BEGIN

			INSERT INTO ITENS_VENDAS
			SELECT @CONTADOR_VENDAS % 3000, @CONTADOR_ITENS, FLOOR(RAND()*(5000-1)+1) ,RAND()*(9999-1)+1, FLOOR(RAND()*(50-1)+1);

			SET @CONTADOR_ITENS+=1;
		END;
	SET @CONTADOR_VENDAS+=1;
END;
GO


--LISTE APENAS 10 ITENS_VENDAS
SELECT TOP 10 *
FROM ITENS_VENDAS;
GO