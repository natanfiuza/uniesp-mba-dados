USE DISCIPLINA02
GO


--1) INCREMENTE EM 1% O VALOR DE TODOS OS ITENS_VENDAS RELACIONADOS A PRODUTOS CUJO NOME INICIA COM A LETRA "A".

UPDATE ITENS_VENDAS
SET VALOR = IV.VALOR * 1.01
FROM ITENS_VENDAS AS IV
INNER JOIN PRODUTOS AS P ON (P.IDPRODUTO = IV.IDPRODUTO)
WHERE P.PRODUTO LIKE 'A%';

--2) AUMENTE EM 2 DIAS A DATA DE TODAS AS VENDAS DE CLIENTES NASCIDOS NA PB

UPDATE VENDAS
SET DATA = DATEADD(d,2,V.DATA)
FROM VENDAS AS V
INNER JOIN CLIENTES AS C ON (C.IDCLIENTE = V.IDCLIENTE)
INNER JOIN LOGRADOUROS AS L ON (C.IDLOGRADOURO = L.IDLOGRADOURO)
INNER JOIN BAIRROS AS B ON (B.IDBAIRRO = L.IDBAIRRO)
INNER JOIN CIDADES AS CID ON (CID.IDCIDADE = B.IDCIDADE)
INNER JOIN UFS U ON (U.IDUF = CID.IDUF)
WHERE U.UF = 'PB';

/*
3) INSIRA NOVAMENTE NA TABELA PRODUTOS OS PRODUTOS CUJO VALOR SEJA MENOR QUE 50, COM UM NOVO ID (QUE É GERADO AUTOMATICAMENTE) 
E COM O VALOR SENDO O DOBRO DO VALOR ANTIGO.
*/

INSERT INTO PRODUTOS
SELECT PRODUTO, VALOR*2
FROM PRODUTOS AS P
WHERE P.VALOR < 50;

--4) CRIE UMA NOVA TABELA CHAMADA "PRODUTOS_DUPLICADOS" 
COM OS PRODUTOS CUJO NOME APARECE MAIS DE UMA VEZ, AUMENTANDO SEU VALOR EM 3%

SELECT IDPRODUTO, PRODUTO, VALOR*1.03 AS VALOR
INTO PRODUTOS_DUPLICADOS
FROM PRODUTOS AS P
WHERE EXISTS(
	SELECT 1
	FROM PRODUTOS AS P1
	WHERE P1.PRODUTO = P.PRODUTO
	GROUP BY P1.PRODUTO
	HAVING COUNT(*) > 1
);

--5) REMOVA TODOS OS PRODUTOS CUJO NOME SEJA REPETIDO, REMOVENDO SEMPRE AQUELE CUJO IDPRODUTO SEJA MAIOR

DELETE 
FROM PRODUTOS
WHERE IDPRODUTO IN(
	SELECT MAX(IDPRODUTO)
	FROM PRODUTOS AS P1
	GROUP BY P1.PRODUTO
	HAVING COUNT(*) > 1
);
GO

/*
6) BASEADO NA TABELA "PRODUTOS_DUPLICADOS", ATUALIZE O VALOR DOS PRODUTOS DA SEGUINTE FORMA:
OS PRODUTOS COM MESMO NOME, IGUALAR AO VALOR DE PRODUTOS_DUPLICADOS
OS DEMAIS, AUMENTAR O VALOR EM 2%
*/

MERGE PRODUTOS AS TARGET
	USING (SELECT IDPRODUTO, PRODUTO, VALOR FROM PRODUTOS_DUPLICADOS) AS SOURCE(IDPRODUTO, PRODUTO, VALOR)
	ON (TARGET.PRODUTO = SOURCE.PRODUTO)
	WHEN MATCHED THEN
		UPDATE SET VALOR = SOURCE.VALOR
	WHEN NOT MATCHED BY SOURCE THEN
		UPDATE SET VALOR = (TARGET.VALOR * 1.02);  --NÃO PERMITIDO
GO


--7) CRIE UMA VIEW QUE EXIBA O NOME DO CLIENTE E O VALOR MEDIO DE SUAS COMPRAS

CREATE VIEW VW_CLIENTES
AS
SELECT C.NOME, (SUM(IV.TOTAL)/COUNT(DISTINCT IV.IDVENDA)) AS MEDIA
FROM CLIENTES AS C
INNER JOIN VENDAS AS V ON (C.IDCLIENTE = V.IDCLIENTE)
INNER JOIN ITENS_VENDAS AS IV ON (V.IDVENDA = IV.IDVENDA)
GROUP BY C.IDCLIENTE, C.NOME;
GO

--8) CRIE UMA VIEW QUE EXIBA O NOME DO PRODUTO, A DATA DA PRIMEIRA VEZ E DA ÚLTIMA VEZ QUE FOI COMPRADO

CREATE VIEW VW_PRODUTOS
AS
SELECT P.PRODUTO, MAX(V.DATA) AS MAIOR, MIN(V.DATA) AS MENOR
FROM PRODUTOS AS P
INNER JOIN ITENS_VENDAS AS IV ON (IV.IDPRODUTO = P.IDPRODUTO)
INNER JOIN VENDAS AS V ON (V.IDVENDA = IV.IDVENDA)
GROUP BY P.IDPRODUTO, P.PRODUTO;
GO

CREATE VIEW VW_PRODUTOS
AS
SELECT P.PRODUTO, PRIMEIRA.DATA AS PRIMEIRA, ULTIMA.DATA AS ULTIMA
FROM PRODUTOS AS P
CROSS APPLY(
	SELECT TOP 1 DATA
	FROM PRODUTOS AS P1
	INNER JOIN ITENS_VENDAS AS IV ON (P1.IDPRODUTO = IV.IDPRODUTO)
	INNER JOIN VENDAS AS V ON (V.IDVENDA = IV.IDVENDA)
	ORDER BY V.DATA ASC
) AS PRIMEIRA
CROSS APPLY(
	SELECT TOP 1 DATA
	FROM PRODUTOS AS P1
	INNER JOIN ITENS_VENDAS AS IV ON (P1.IDPRODUTO = IV.IDPRODUTO)
	INNER JOIN VENDAS AS V ON (V.IDVENDA = IV.IDVENDA)
	ORDER BY V.DATA DESC
) AS ULTIMA;
;
GO

--9) CRIE UMA FUNÇÃO QUE RECEBA UMA SIGLA DE ESTADO E RETORNE O NÚMERO DE MUNICÍPIOS DO MESMO

CREATE FUNCTION DBO.FN_UF(@UF CHAR(2))
RETURNS TABLE
AS
RETURN
(
	SELECT COUNT(*) AS QTDE
	FROM UFS U
	INNER JOIN CIDADES C ON (U.IDUF = C.IDUF)
	WHERE UF = @UF
);
GO

SELECT *
FROM DBO.FN_UF('RN');
GO

SELECT F.*, TAB.*
FROM FUNCIONARIOS F
INNER JOIN UFS U ON (U.IDUF = F.IDUF_RG)
CROSS APPLY DBO.FN_UF(U.UF) TAB
GO

/*
10) ADICIONE A COLUNA DT_ULTIMA_COMPRA NA TABELA CLIENTES, DO TIPO DATETIME E 
PODENDO TER VALOR NULO.
AGORA CRIE UMA TRIGGER NA TABELA VENDAS QUE, SEMPRE QUE UM CLIENTE FIZER UMA 
COMPRA (VENDA), ESTA ATUALIZE A DT_ULTIMA_COMPRA COM A DATA DA MESMA.
*/


ALTER TABLE CLIENTES
ADD DT_ULTIMA_COMPRA DATETIME NULL;
GO


CREATE TRIGGER TRG_VENDAS_INSERT
ON VENDAS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE CLIENTES
	SET DT_ULTIMA_COMPRA = I.DATA
	FROM INSERTED AS I
	INNER JOIN CLIENTES AS C ON (C.IDCLIENTE = I.IDCLIENTE)

	RETURN
END;
GO

SELECT *
FROM CLIENTES
WHERE IDCLIENTE = 2;

--VEJA O IMPACTO DO SET NOCOUNT ON DA TRIGGER
INSERT INTO VENDAS
(DATA, IDCLIENTE)
VALUES
(GETDATE(),2);
GO


SELECT *
FROM CLIENTES
WHERE IDCLIENTE = 2;
GO

SELECT *
FROM VENDAS
WHERE IDCLIENTE = 2
ORDER BY DATA DESC;